/**
 * Created by Zelei on 2017/5/9.
 */
(function ($) {
  var UP_DOWN = 'updown',
    ODD_EVEN = 'oddeven',
    WEI = "wei",
    ZHI = "zhi",
    dataUtil = {
      extreme: extreme,
      group: group,
      three: three,
      bigSmall: bigSmall,
      bigOrSmall: bigOrSmall,
      oneBigOrSmall: oneBigOrSmall,
      oneOddEven: oneOddEven,
      normalBall: normalBall,
      picBall: picBall,
      sumOddEven: sumOddEven,
      threePlay: threePlay,
      color: color
    }, tabName = {
      "tema": "特码",
      "longhu": "龙虎斗",
      "rank": "排名",
      "bsoeLH": "大小单双龙虎",
      "zm7": "正码1-7",
      "zm4": "正码1-4"
    };

  $.extend({
    getProtocolPrefix: function () {
      return (window.location.protocol || document.location.protocol) + '//';
    },
    toFullPath: function (url) {
      var protocol = $.getProtocolPrefix();
      if (url.indexOf(protocol) === -1) {
        return protocol + window.location.host + url;
      }
      return url;
    },
    getQueryParameter: function (parameterName) {
      if (!parameterName) {
        return null;
      }
      var reg = new RegExp('(^|&)' + parameterName + '=([^&]*)(&|$)');
      var r = decodeURI(window.location.search.substr(1)).match(reg);
      return r != null ? r[2] : null;
    },
    dateformat: function (date, pattern) {
      var o = {
        'M+': date.getMonth() + 1,
        'd+': date.getDate(),
        'h+': date.getHours() % 12 == 0 ? 12 : date.getHours() % 12,
        'H+': date.getHours(),
        'm+': date.getMinutes(),
        's+': date.getSeconds(),
        'q+': Math.floor((date.getMonth() + 3) / 3),
        'S': date.getMilliseconds()
      };
      var week = {
        '0': '/u65e5',
        '1': '/u4e00',
        '2': '/u4e8c',
        '3': '/u4e09',
        '4': '/u56db',
        '5': '/u4e94',
        '6': '/u516d'
      };
      if (/(y+)/.test(pattern)) {
        pattern = pattern.replace(RegExp.$1,
          (date.getFullYear() + '').substr(4 - RegExp.$1.length));
      }
      if (/(E+)/.test(pattern)) {
        pattern = pattern.replace(RegExp.$1,
          ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? '/u661f/u671f'
            : '/u5468') : '') + week[date.getDay() + '']);
      }
      for (var k in o) {
        if (new RegExp('(' + k + ')').test(pattern)) {
          pattern = pattern.replace(RegExp.$1,
            (RegExp.$1.length == 1) ? (o[k]) : (('00' + o[k]).substr(
              ('' + o[k]).length)));
        }
      }
      return pattern;
    },
    loading: function (id) {
      var loadingEl = $('<div class="loading-default"><div></div></div>');
      if (!id === false) {
        loadingEl.attr('id', id);
      }
      $(document.body).append(loadingEl);
      return loadingEl;
    },
    loaded: function (id) {
      if (!id === false) {
        $('#' + id).remove();
      } else {
        $(document.body).children('.loading-default').remove();
      }
    },
    curGame: {}
  });

  $.fn.extend({
    __renderTbodyEmpty: function () {
      return $(this).html('<tr></tr>');
    },
    __renderTbody: function (items, keys) {
      return $(this).each(function (i, e) {
        $(e).empty();
        $.each(items, function (i, item) {
          var arr = [],
            i = 0,
            len,
            tr = "<tr>";
          arr = item.openNum;
          item.result = arr.join(',');

          $.each(keys, function (i, key) {
            var val = item[key];
            if (val === undefined || val === null) {
              val = "";
            }
            switch (key) {
              case "openNumLH":
                for (i = 0, len = arr.length; i < len; i += 1) {
                  tr = tr + '<td>' + item.openNumLH(arr[i]) + '</td>';
                }
                break;
              case "openNumTM":
                for (i = 0, len = arr.length; i < len; i += 1) {
                  tr = tr + '<td>' + item.openNumTM(arr[i]) + '</td>';
                }
                break;
              case "openNumLHSF":
                tr = tr + '<td>' + item.openNumLHSF(arr) + '</td>';
                break;
              case "openNumMerge":
                tr = tr + '<td>' + item.openNumMerge(arr) + '</td>';
                break;
              case "sixi":
                tr = tr + '<td>' + item.sixi(arr) + '</td>';
                break;
              case "openNumZM7":
                for (i = 0, len = arr.length; i < len - 1; i += 1) {
                  tr = tr + "<td><span class='blue-ball'>" + arr[i]
                    + "</span></td>" +
                    "<td>" + item.OneBigSmall(arr[i]) + "</td>" +
                    '<td>' + item.OneOddEven(arr[i]) + '</td>' +
                    '<td>' + item.OneCombOddEven(arr[i]) + '</td>' +
                    '<td>' + item.OneLastBigSmall(arr[i]) + '</td>';
                }
                break;
              case "openNumZM4":
                for (i = 0, len = arr.length; i < len - 1; i += 1) {
                  tr = tr + "<td><span class='b_6_" + arr[i] + "'>" + arr[i]
                    + "</span></td>" +
                    "<td>" + item.OneBigSmall(arr[i]) + "</td>" +
                    '<td>' + item.OneOddEven(arr[i]) + '</td>' +
                    '<td>' + item.OneCombOddEven(arr[i]) + '</td>' +
                    '<td>' + item.sixi(arr[i]) + '</td>' +
                    '<td>' + item.OneLastBigSmall(arr[i]) + '</td>';
                }
                break;
              case "bsoeLH":
                for (i = 0, len = arr.length; i < len; i += 1) {
                  tr = tr + "<td>" + arr[i] + "</td>" +
                    "<td>" + item.oneBigSmall(arr[i]) + "</td>" +
                    '<td>' + item.oneOddEven(arr[i]) + '</td>';
                  if (item.pk(i)) {
                    tr = tr + '<td>' + item.pk(i) + '</td>';
                  }
                }
                break;
              case "bsoe":// big small odd even 大小单双
                for (i = 0, len = arr.length; i < len; i += 1) {
                  tr = tr + '<td>' + item.OneBigSmall(arr[i]) + '</td>' +
                    '<td>' + item.OneOddEven(arr[i]) + '</td>';
                }
                break;
              case "longhu":
                for (i = 0, len = arr.length; i < len; i += 1) {
                  for (var j = i + 1; j < arr.length; j += 1) {
                    tr = tr + '<td>' + item.pk(arr[i], arr[j]) + '</td>';
                  }
                }
                break;
              case "specialColor":
                tr = tr + '<td><span class="' + item.specialColor.color + '">' +
                  item.specialColor.name + '</span></td>';
                break;
              default:
                tr = tr + '<td>' + val + '</td>';
                break;
            }
          });
          tr = tr + '</tr>';
          $(e).append(tr);
        })
      })
    }
  });

  function getQueryDate() {
    var dateRow = $('#queryDate .active');
    var now = new Date();
    var dateVal = parseInt(dateRow.attr('data-date'));
    now.setDate(now.getDate() - dateVal);
    dateVal = $.dateformat(now, 'yyyy-MM-dd');
    return dateVal;
  }

  function isJsonDateOrRows(target) {// 最近三天，30,50,100 请求json数据
    if (target.length !== 10 && target) {
      return true;
    }

    var diffNum = DateDiff($.dateformat(new Date(), 'yyyy-MM-dd'), target);// 相差天数;
    if (diffNum === 0 || diffNum === 1 || diffNum === 2) {
      return true;
    } else {
      return false;
    }
  }

  function DateDiff(sDate1, sDate2) {  // sDate1和sDate2是yyyy-MM-dd格式
    var aDate, oDate1, oDate2, iDays;
    aDate = sDate1.split("-");
    oDate1 = new Date(aDate[1] + '-' + aDate[2] + '-' + aDate[0]);  // 转换为yyyy-MM-dd格式
    aDate = sDate2.split("-");
    oDate2 = new Date(aDate[1] + '-' + aDate[2] + '-' + aDate[0]);
    iDays = parseInt((oDate1 - oDate2) / 1000 / 60 / 60 / 24); // 把相差的毫秒数转换为天数
    return iDays;  // 返回相差天数
  }

  function loadOpenInfo(gameId, isLhc) {
    // 加载开奖时间
    if ($.openTimeContent[$.curGame.gameCode]) {
      $('#openTimeContent').html($.openTimeContent[$.curGame.gameCode]);
    } else {
      $('#openTimeContent').html("");
    }
    var curTurnNum = $('#curTurnNum').empty(),
      curOpenNum = $('#curOpenNum').empty();
    $.getJSON($.toFullPath('/v/lottery/getOpenInfo?gameId=' + gameId),
      function (response) {
        if (!response || !response.pre) {
          return;
        }
        curTurnNum.text(response.pre.turnNum);
        if (isLhc) {
          $.each(response.pre.openNum !=null ? response.pre.openNum.split(',') : "", function (i, num) {
            curOpenNum.append('<li class="col-' + num + '">' + num + '</li>');
          });
        } else {
          if (response.pre.openNum) {
            $.each(response.pre.openNum.split(','), function (i, num) {
              curOpenNum.append('<li class="wave-red">' + num + '</li>');
            });
          }
        }
      });
  }

  function loadData() {
    initTab();
    initTable();
  }

  function initTab() {
    var openCfg = getOpenCfg($.curGame.gameCode === 'cqxync' ? 'cqxync' : $.curGame.gameType);
    var linkTab = $('.linkTab>ul');
    linkTab.children('li').remove();
    if (!openCfg || (Object.keys(openCfg).length === 1 && Object.keys(
        openCfg)[0] === 'noTab')) {
      linkTab.empty();
    } else {
      $.each(openCfg, function (name, value) {
        linkTab.append(
          '<li class="link" data-tab="' + name + '">' + tabName[name]
          + '</li>');
      });
      linkTab.children('li:eq(0)').addClass('active');

      $('#link-tab>.linkTab>#wfTab>li').on('click', function () {
        if ($(this).hasClass('active')) {
          return;
        }
        $(this).addClass('active').siblings('.active').removeClass('active');
        initTable();
      });
    }
  }

  function initTable() {
    var gameCode = $.curGame.gameCode,
      isJs = $.curGame.isJs,
      gameType = $.curGame.gameType,
      openCfg = getOpenCfg($.curGame.gameCode === 'cqxync' ? 'cqxync' : $.curGame.gameType),
      tabType = $('#wfTab>li.active').attr('data-tab');
    if (tabType == undefined) {
      tabType = 'noTab';
    }
    $.loading();
    if (!openCfg) {
      $('#open-infos>thead,#open-infos>tbody').empty();
      $.loaded();
    } else {
      // thead
      var ths1 = "", ths2 = "", apiUrl, targetDate = $.queryDate;
      $.each(openCfg[tabType].head, function (name, value) {
        var len = value.length;
        if (len != 0) {
          if (value[0] !== "") {// 默认第一列名称不为空时
            for (var i = 0; i < len; i += 1) {
              ths2 = ths2 + '<th>' + value[i] + '</th>';
            }
            ths1 = ths1 + '<th rowspan=1 colspan="' + len + '">' + name
              + '</th>'
          } else {
            ths1 = ths1 + '<th rowspan=2 colspan="' + len + '">' + name
              + '</th>'
          }
        } else {
          ths1 = ths1 + '<th rowspan=2 colspan=1>' + name + '</th>';
        }
      })
      $('#open-infos>thead').html('<tr>' + ths1 + '</tr><tr>' + ths2 + '</tr>');
      $.getJSON("/api/config/getOne?configName=system_config&configKey=analysis_api_url", function (response) {
    	  $.loaded();
    	  if (!response) {
        	  return;
          }
    	  apiUrl = response.configValue + (isJs ? '/js' : '') + '/anls-api/data/' + gameCode + '/lotteryList/' + targetDate + '.do';
	        $.getJSON(apiUrl, function (response) {
	          if (!response) {
	        	  return;
	          }
	          var keys = openCfg[tabType].keys;
	          renderRule(response);
	          $('.infos-table>tbody').__renderTbody(response, keys);
	          $.loaded();
	        }).error(function () {
	          $('.infos-table>tbody').__renderTbodyEmpty();
	          $.loaded();
	        });
        }).error(function () {
          $('.infos-table>tbody').__renderTbodyEmpty();
          $.loaded();
        });
    }
  }

  function initOpenConfig() {
    var config = {},
      openTimeContent;
    $.ajax({
      url: $.toFullPath('/data/json/official/config_open_infos.json'),
      async: false,
      dataType: 'json',
      method: 'GET',
      success: function (response) {
        config = response;
      }
    });

    $.ajax({
      url: $.toFullPath('/data/json/official/config_open_time.json'),
      async: false,
      dataType: 'json',
      method: 'GET',
      success: function (response) {
        openTimeContent = response;
      }
    });

    $.extend({
      openConfig: config,
      openTimeContent: openTimeContent
    });

  }

  function getOpenCfg(gameType) {
    return $.openConfig[gameType];
  }

  // =========================================================================
  // 开奖结果规则配置
  // =========================================================================
  function renderRule(data) {
    var gameCode = $.curGame.gameCode;
    var gameType = $.curGame.gameType;
    $.each(data, function (i, item) {
      var arr = [];
      item.gameType = gameType;
      arr = item.openNum;
      item.result = arr.join(',');

      // 所有游戏可共用的属性
      item.sum = compute(arr); // 总和
      item.sumOddEven = dataUtil.sumOddEven(item.sum);

      switch (gameType) {
        case "lhc":
          item.pk = function (long, hu) {
            return pk(long, hu, arr, 49);
          }
          $.extend(item, extendAttr.lhc(item, arr));
          break;
        case "ssc":
          item.pk = function (long, hu) {
            if (long === hu) {
              return showTag("和");
            } else if (long > hu) {
              return showTag("龙", "r");
            } else {
              return showTag("虎", "b");
            }
          }
          $.extend(item, extendAttr.ssc(item, arr));
          break;
        case "11x5":
          item.pk = function (long, hu) {
            return pk(long, hu, arr, 11);
          }
          $.extend(item, extendAttr.gd11x5(item, arr));
          break;
        case "gdklsf":
          if (gameCode === 'cqxync') {
            $.extend(item, extendAttr.cqxync(item, arr));
          } else {
            item.pk = function (long, hu) {
              return pk(long, hu, arr);
            }
            $.extend(item, extendAttr.gdklsf(item, arr));
          }
          break;
        case "gxklsf":
          item.pk = function (long, hu) {
            return pk(long, hu, arr, 21);
          }
          $.extend(item, extendAttr.gxklsf(item, arr));
          break;
        case "pk10":
          $.extend(item, extendAttr.bjkc(item, arr));
          break;
        case "k3":
          $.extend(item, extendAttr.jsk3(item, arr));
          break;
        case "fc3d":
          $.extend(item, extendAttr.fc3d(item, arr));
          break;
        case "bjkl8":
          $.extend(item, extendAttr.bjkl8(item, arr));
          break;
        case "pcdd":
          $.extend(item, extendAttr.pcdd(item, arr));
          break;
        default:
          break;
      }
    });
  }

  // ========================================================================
  // 游戏不同属性方法配置
  // ========================================================================
  var extendAttr = {
    lhc: function (item, arr) {
      var obj = {},
        special = item.result.match(/\d+$/)[0] * 1,
        specialComb = compute(String(special).split('')),
        he = showTag("和");
      item.year = (new Date()).getFullYear();// 今年年份

      obj.openNumLH = function (data) {
        return "<span class='b_12_" + data + "'>" + data + "</span><span>" +
          getZodiacOne(item.openDateTime, data) + "</span>";
      };
      obj.openNumTM = function (data) {
        return "<span class='b_12_" + data + "'>" + data + "</span><span>" +
          getZodiacOne(item.openDateTime, data) + "</span>";
      };
      obj.sumBigSmall = bigSmall(item.sum, 175, ZHI, {big: "总大", small: "总小"});
      obj.specialOddEven = (special === 49 ? he : (special % 2 === 0 ? showTag(
        "特双", "b") : showTag("特单", "r")));
      obj.specialBigSmall = (special === 49 ? he : (special >= 25 ? showTag(
        "特大", "b") : showTag("特小", "r")));
      obj.specialCombOddEven = (special === 49 ? he : (specialComb % 2 === 0
        ? showTag("合双", "b") : showTag("合单", "r")));
      obj.specialCombBigSmall = (special === 49 ? he : (specialComb > 6
        ? showTag("合大", "b") : showTag("合小", "r")));
      obj.specialLastNum = (special === 25 ? he : (specialComb % 10 >= 5
        ? showTag("合尾大", "b") : showTag("合尾小", "r")));
      obj.specialAnimal = (special === 49 ? he : getZodiac(item.openDateTime, special,
        2));
      obj.specialColor = dataUtil.color(special);
      obj.upDown = dataUtil.three(arr.slice(0, -1), function (e) {
        e = Number(e);
        if (e === 49) {
          return special > 24 ? special + '' : '';
        } else {
          return e > 24 ? e + '' : '';
        }
      }, 6, UP_DOWN);
      obj.oddEven = dataUtil.three(arr.slice(0, -1), function (e) {
        e = Number(e);
        if (e === 49) {
          return special % 2 === 0 ? special + '' : '';
        } else {
          return e % 2 === 0 ? e + '' : '';
        }
      }, 6, ODD_EVEN);
      return obj;
    },
    ssc: function (item, arr) {
      var obj = {}, sum = item.sum;
      obj.openNumLH = dataUtil.normalBall();
      obj.openNumTM = dataUtil.normalBall();
      obj.sumBigSmall = sum >= 23 ? showTag("总大", "b") : showTag("总小", "r");
      obj.OneBigSmall = dataUtil.oneBigOrSmall(5);
      obj.OneOddEven = dataUtil.oneOddEven();
      obj.before = dataUtil.threePlay(arr.slice(0, 3));
      obj.middle = dataUtil.threePlay(arr.slice(1, 4));
      obj.behind = dataUtil.threePlay(arr.slice(2));
      return obj;
    },
    gd11x5: function (item, arr) {
      var obj = {},
        special = item.result.match(/\d+$/)[0] * 1;
      obj.openNumTM = dataUtil.picBall('b_4_');
      obj.openNumLH = dataUtil.picBall('b_12_');
      obj.sumBigSmall = dataUtil.bigSmall(item.sum, 31, ZHI,
        {big: "总大", small: "总小"}, 30); // 总和大小
      obj.lastBigSmall = dataUtil.bigSmall(item.sum, 5, WEI,
        {big: "总尾大", small: "总尾小"}); // 总尾大小
      obj.OneBigSmall = function (num) {// 单个号码的大小
        num = Number(num);
        if (num === 11) {
          return showTag("和");
        } else if (num >= 6) {
          return showTag("大", "b");
        } else {
          return showTag("小", "r");
        }
      }
      obj.OneOddEven = dataUtil.oneOddEven(11);
      obj.upDown = dataUtil.three(arr.slice(0, -1), function (e) {// 上下
        e = Number(e);
        if (e === 11) {
          return special > 5 ? special + '' : '';
        } else {
          return e > 5 ? e + '' : '';
        }
      }, 4, UP_DOWN);
      obj.oddEven = dataUtil.three(arr.slice(0, -1), function (e) {// 奇偶
        e = Number(e);
        if (e === 11) {
          return special % 2 === 0 ? special + '' : '';
        } else {
          return e % 2 === 0 ? e + '' : '';
        }
      }, 4, ODD_EVEN);

      return obj;
    },
    gdklsf: function (item, arr) {
      var obj = {},
        sum = item.sum,
        special = item.result.match(/\d+$/)[0] * 1;
      obj.openNumTM = dataUtil.normalBall();
      obj.openNumLHSF = function (theArr) {
        var str = "", i = 0, len;
        for (i = 0, len = theArr.length; i < len; i += 1) {
          str = str + "<span class='m-lr-xs blue-ball'>" + theArr[i]
            + "</span>";
        }
        return str;
      }
      obj.sumBigSmall = bigSmall(sum, 85, ZHI, {big: "总大", small: "总小"}, true); // 总和大小
      obj.lastBigSmall = bigSmall(sum, 5, WEI, {big: "总尾大", small: "总尾小"}); // 总尾大小
      obj.specialBigSmall = special >= 11 ? showTag("大", "b") : showTag("小",
        "r");
      obj.specialOddEven = special % 2 === 0 ? showTag("双", "b") : showTag("单",
        "r");
      obj.specialLastBigSmall = bigSmall(special, 5, WEI,
        {big: "尾大", small: "尾小"});
      obj.specialCombOddEven = compute(String(special).split('')) % 2 === 0
        ? showTag("合双", "b") : showTag("合单", "r");
      obj.upDown = three(arr, function (e) {
        return Number(e) > 10 ? e : '';
      }, 8, UP_DOWN);
      obj.oddEven = three(arr, function (e) {
        return Number(e) % 2 === 0 ? e : '';
      }, 8, ODD_EVEN);
      obj.OneBigSmall = function (data) {
        return bigSmall(data, 11, ZHI, {big: '大', small: '小'});
      }
      obj.OneOddEven = function (data) {
        return Number(data) % 2 === 0 ? showTag("双", "b") : showTag("单", "r");
      }
      obj.OneCombOddEven = function (data) {
        return compute(String(data).split('')) % 2 === 0 ? showTag("双", "b")
          : showTag("单", "r");
      }
      obj.OneLastBigSmall = function (data) {
        return bigSmall(Number(data), 5, WEI, {big: '尾大', small: '尾小'});
      }
      return obj;
    },
    gxklsf: function (item, arr) {
      var obj = {},
        special = item.result.match(/\d+$/)[0] * 1,
        sum = item.sum,
        sixi = {
          '_1_2_3_4_5_': '福',
          '_6_7_8_9_10_': '禄',
          '_11_12_13_14_15_': '寿',
          '_16_17_18_19_20_': '喜'
        };
      obj.openNumTM = dataUtil.picBall('b_6_');
      obj.openNumLHSF = function (theArr) {
        var str = "", i, len;
        for (i = 0, len = theArr.length; i < len; i += 1) {
          str = str + "<span class='m-lr-xs b_6_" + theArr[i] + "'>" + theArr[i]
            + "</span>";
        }
        return str;
      }
      obj.sumBigSmall = dataUtil.bigSmall(sum, 56, ZHI,
        {big: "总大", small: "总小", he: "和-和"}, true); // 总和大小
      obj.lastBigSmall = dataUtil.bigSmall(sum, 5, WEI,
        {big: "总尾大", small: "总尾小"}); // 总尾大小
      obj.sixi = function (data) {
        if (Number(data) === 21) {
          return '输-和';
        }
        data = '_' + data + '_';
        var text = '';
        $.each(sixi, function (a, b) {
          a.indexOf(data) > -1 && (text = b);
        });
        return text;
      }
      obj.OneBigSmall = function (data) {
        data = $.isArray(data) ? Number(data[0]) : Number(data);
        return data === 21 ? showTag("输-和") : (data >= 11 ? showTag("大", "b")
          : showTag("小", "r"));
      }
      obj.OneOddEven = dataUtil.oneOddEven(21, {he: "输-和"});
      obj.OneCombOddEven = function (data) {
        data = $.isArray(data) ? Number(data[0]) : Number(data);
        return data === 21 ? showTag("输-和") : (compute(String(data).split(''))
        % 2 === 0 ? showTag("合双", "b") : showTag("合单", "r"));
      }
      obj.OneLastBigSmall = function (data) {
        data = $.isArray(data) ? Number(data[0]) : Number(data);
        return data === 21 ? showTag("输-和") : bigSmall(data, 5, WEI,
          {big: "尾大", small: "尾小"});
      }
      obj.specialBigSmall = obj.OneBigSmall(special);
      obj.specialOddEven = obj.OneOddEven(special);
      obj.specialLastBigSmall = obj.OneLastBigSmall(special);
      obj.specialSiXi = obj.sixi(special);
      obj.specialCombOddEven = obj.OneCombOddEven(special);
      obj.upDown = dataUtil.three(arr.slice(0, -1), function (e) {
        e = Number(e);
        if (e === 21) {
          return special > 10 ? special + '' : '';
        } else {
          return e > 10 ? e + '' : '';
        }
      }, 4, UP_DOWN);
      obj.oddEven = dataUtil.three(arr.slice(0, -1), function (e) {
        e = Number(e);
        if (e === 21) {
          return special % 2 === 0 ? special + '' : '';
        } else {
          return e % 2 === 0 ? e + '' : '';
        }
      }, 4, ODD_EVEN);
      return obj
    },
    bjkc: function (item, arr) {
      var obj = {}, sum = item.sum;
      // obj.openNumTM = dataUtil.normalBall();
      obj.openNumTM = function (data) {
        return "<span class='pk10 pk10_" + data + "'>" + data + "</span>";
      };
      obj.combFirstSecond = Number(arr[0]) + Number(arr[1]);
      obj.combFirstSecondOddEven = dataUtil.oneOddEven(false)(
        obj.combFirstSecond);
      obj.combFirstSecondBigSmall = dataUtil.bigOrSmall(obj.combFirstSecond,
        12);
      obj.oneBigSmall = dataUtil.oneBigOrSmall(6);
      obj.oneOddEven = dataUtil.oneOddEven();
      obj.pk = function (data) {
        if (data < 5) {
          return Number(arr[data]) > Number(arr[9 - data]) ? showTag("龙", "b")
            : showTag("虎", "r");
        } else {
          return '';
        }
      }
      return obj;
    },
    jsk3: function (item, arr) {
      var obj = {}, sum = item.sum;
      obj.openNumTM = dataUtil.picBall('gxk3_b_');
      obj.sumBigSmall = dataUtil.bigOrSmall(sum, 11);
      return obj;
    },
    fc3d: function (item, arr) {
      var obj = {}, sum = item.sum;
      obj.openNumTM = dataUtil.normalBall();
      obj.sumBigSmall = dataUtil.bigOrSmall(sum, 14);
      return obj;
    },
    pl3: function (item, arr) {
      var obj = {}, sum = item.sum;
      obj.openNumTM = dataUtil.normalBall();
      obj.sumBigSmall = dataUtil.bigOrSmall(sum, 14);
      return obj;
    },
    bjkl8: function (item, arr) {
      var obj = {}, sum = item.sum;
      obj.openNumTM = dataUtil.normalBall('f_c_b');
      obj.upDown = dataUtil.three(arr, function (e) {
        return (Number(e) > 40 ? e : '');
      }, 20, UP_DOWN);
      obj.oddEven = dataUtil.three(arr, function (e) {
        return (Number(e) % 2 === 0 ? e : '');
      }, 20, ODD_EVEN);
      obj.sumBigSmall = dataUtil.bigOrSmall(sum, 811, 810, {he: "810"});
      return obj;
    },
    cqxync: function (item, arr) {
      var obj = {}, sum = item.sum;
      obj.openNumMerge = function (theArr) {
        var str = "", i, len;
        for (i = 0, len = theArr.length; i < len; i += 1) {
          str += "<span class='ncBall ncBall" + theArr[i] + "'>" + theArr[i]
            + "</span>";
        }
        return str;
      }
      obj.upDown = dataUtil.three(arr, function (e) {
        return (Number(e) > 10 ? e : '');
      }, 8, UP_DOWN);
      obj.oddEven = dataUtil.three(arr, function (e) {
        return (Number(e) % 2 === 0 ? e : '');
      }, 8, ODD_EVEN);
      obj.sumBigSmall = dataUtil.bigOrSmall(sum, 85, 84);
      obj.lastBigSmall = dataUtil.bigSmall(sum, 5, WEI,
        {big: "总尾大", small: "总尾小"}); // 总尾大小
      return obj;
    },
    pcdd: function (item, arr) {
      var obj = {}, sum = item.sum;
      obj.openNumMerge = function (theArr) {
        var str = "", i, len;
        for (i = 0, len = theArr.length; i < len; i += 1) {
          str = str + "<span class='blue-ball m-lr-xs'>" + theArr[i]
            + "</span>";
          if (i !== (len - 1)) {
            str += "+";
          }
        }
        str = str + "=<span class='blue-ball m-lr-xs'>" + sum + "</span>";
        return str;
      }
      obj.group = dataUtil.group(sum);
      obj.extreme = dataUtil.extreme(sum);
      obj.sumBigSmall = dataUtil.bigOrSmall(sum, 14);
      return obj;
    }
  }

  // ======================================================================================================
  // 开奖结果数据处理方法
  // ======================================================================================================

  // 单值 大小
  function oneBigOrSmall(median) {
    return function (data) {
      return Number(data) >= median ? showTag("大", "b") : showTag("小", "r");
    }
  }

  // 单值 奇偶
  function oneOddEven(he, options) {
    if (!options) {
      options = {};
    }
    if (he) {
      return function (data) {
        return data === he ? showTag(options.he || "和") : (Number(data) % 2
        === 0 ? showTag("双", "b") : showTag("单", "r"));
      }
    } else {
      return function (data) {
        return Number(data) % 2 === 0 ? showTag("双", "b") : showTag("单", "r");
      }
    }
  }

  // 彩球号码，普通样式函数
  function normalBall(clazz) {
    return function (data) {
      return "<span class='" + (clazz || 'blue-ball') + "'>" + data + "</span>";
    }
  }

  // 图片类型彩球号码
  function picBall(clazz) {
    return function (data) {
      return "<span class='" + clazz + data + "'>" + (clazz == 'gxk3_b_' ? ''
        : data) + "</span>";
    }
  }

  /**
	 * 根据年公历年月日算出农历年份
	 * 
	 * @param year
	 * @param month
	 * @param day
	 * @returns {*}
	 */
  function getLunar(year, month, day) {
    var converter = new LunarSolarConverter();
    var solar = new Solar();
    solar.solarYear = year;
    solar.solarMonth = month + 1;
    solar.solarDay = day;
    return converter.SolarToLunar(solar).lunarYear;
  }

  function getZodiacOne(year, num) {
    // num % 12 将号码转换成1-12,得出在数组对应的索引
    var zodiac = ["鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪"];
    var cate = {
      "鼠,虎,兔,龙,蛇,猴,": "野兽",
      "牛,马,羊,鸡,狗,猪,": "家禽"
    };
    var reference = 1924;// /必须是鼠年，即reference对应zodiac[0]
    var dateYear = new Date(year);
    var nongli = getLunar(dateYear.getFullYear(), dateYear.getMonth(), dateYear.getDate());
    var index = (nongli - reference) % 12;
    var a = zodiac.slice(0, index + 1).reverse();
    var b = zodiac.slice(index + 1).reverse();
    var sortZodiac = a.concat(b);
    return sortZodiac[(num - 1) % 12];
  }

  // / year:data, 要查询的(农历)年份 改成开奖时间
  // / num :String, 要查询的球号,如果多个号码则用逗号分隔
  // / type:Number, 1返回(Array)生肖 2返回(String)家禽/野兽
  function getZodiac(year, num, type) {
    // num % 12 将号码转换成1-12,得出在数组对应的索引
    var zodiac = ["鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪"];
    var cate = {
      "鼠,虎,兔,龙,蛇,猴,": "野兽",
      "牛,马,羊,鸡,狗,猪,": "家禽"
    };
    var dateYear = new Date(year);
    var nongli = getLunar(dateYear.getFullYear(), dateYear.getMonth(), dateYear.getDate());
    var reference = 1924;// /必须是鼠年，即reference对应zodiac[0]
    var index = (nongli - reference) % 12;
    var a = zodiac.slice(0, index + 1).reverse();
    var b = zodiac.slice(index + 1).reverse();
    var sortZodiac = a.concat(b);
    var result = [];
    if (type === 1) {
      var nums = num.split(',');
      for (var i = 0, len = nums.length; i < len; i += 1) {
        result.push({
          num: Number(nums[i]),
          name: sortZodiac[(nums[i] - 1) % 12]
        });
      }
    } else if (type === 2) {
      if (Number(num) === 49) {
        return '<span>和</span>';
      }
      for (var i in cate) {
        i.indexOf(sortZodiac[(Number(num) - 1) % 12]) > -1 && result.push(
          "<span class='" + (cate[i] === "野兽" ? 'f_c_r' : 'f_c_b') + "'>"
          + '【' + sortZodiac[(num - 1) % 12] + '】' + cate[i] + "</span>");
      }
      return result[0];
    }
    return result;
  }

  // / 色波
  function color(num) {
    var arr = [",1,2,7,8,12,13,18,19,23,24,29,30,34,35,40,45,46,",
      ",3,4,9,10,14,15,20,25,26,31,36,37,41,42,47,48,",
      ",5,6,11,16,17,21,22,27,28,32,33,38,39,43,44,49,"]
    var arrCn = ["红波", "蓝波", "绿波"];
    var color = ["bg_red", "bg_blue", "bg_green"];
    var index = 0;
    $.each(arr, function (a, b) {
      b.indexOf(',' + num + ',') > -1 && (index = a);
    });
    return {name: arrCn[index], color: color[index]};
  }

  // / 求和
  function compute(arr) {
    var c = 0;
    $.each(arr, function (a, b) {
      c += Number(b);
    });
    return c;
  }

  // / 标签的拼接
  // / txt:{String} 显示的文本
  // / type:{String} b:蓝色 r:红色 undefined:无色
  function showTag(txt, type) {
    if (type === undefined) {
      return '<span>' + txt + '</span>';
    } else {
      return "<span class='f_c_" + type + "'>" + txt + "</span>";
    }
  }

  // 总单双
  function sumOddEven(sum) {
    return sum % 2 === 0 ? showTag("总双", "b") : showTag("总单", "r");
  }

  // / 前三、中三、后三
  // / arr:{Array}
  function threePlay(arr) {
    arr = arr.sort(function (a, b) {
      return Number(a) - Number(b);
    });
    $.each(arr, function (a, b) {
      arr[a] = Number(b);
    });
    if (arr[0] === arr[1] && arr[0] === arr[2]) {
      return '豹子';
    } else if ((arr[0] + 1 === arr[1] && arr[1] + 1 === arr[2])
      || /^(019)|(089)$/.test(arr.join(''))) {
      return '顺子';
    } else if (arr.unique().length === 2) {
      return '对子';
    } else if (arr[0] + 1 === arr[1] || arr[1] + 1 === arr[2] || /^0\d9$/.test(
        arr.join(''))) {
      return '半顺';
    } else {
      return '杂六';
    }
  }

  // / fn:{Function}筛选号码的函数，返回下盘或偶数的数组
  // / length:{Number}参与上下奇偶的号码个数
  // / type:{String} oddeven：上下 updown：奇偶
  // / 相同规则：上下或者奇偶的个数相同则为和
  function three(arr, fn, length, type) {
    var text = [];
    if (type === "oddeven") {
      text = ['偶', '奇'];
    } else if (type === "updown") {
      text = ['下', '上'];
    }
    var len1 = arr.screen(fn).length, len2 = length / 2;
    if (len1 === len2) {
      return '<span>和</span>';
    } else if (len1 > len2) {
      return '<span class="f_c_b">' + text[0] + '</span>';
    } else {
      return '<span class="f_c_r">' + text[1] + '</span>';
    }
  }

  // / 龙虎斗
  function pk(long, hu, arr, he) {
    var long = Number(long), hu = Number(hu);
    if (long === he || hu === he) {
      return showTag("和");
    } else if (long > hu) {
      return showTag("龙", "r");
    } else {
      return showTag("虎", "b");
    }
  }

  // / 与大小相关的属性
  // / sum:{Number} 和值
  // / bigVal:{Number} 为大的条件值
  // / type:{String} 玩法名
  // / he:{Boolen} 是否为有和
  function bigSmall(sum, bigVal, type, options, he) {
    switch (type) {
      case "zhi":// 值大小（总和大小、大小）
        if (he === undefined) {
          return sum >= bigVal ? showTag(options.big, "b") : showTag(
            options.small, "r");
        } else {
          return sum === (bigVal - 1) ? showTag(options.he ? options.he : "和")
            : (sum >= bigVal ? showTag(options.big, "b") : showTag(
              options.small, "r"));
        }
      case "wei":// / 尾大小（总尾大小、合尾大小）
        var last = Number(String(sum).slice(-1));
        return last >= bigVal ? showTag(options.big, "b") : showTag(
          options.small, "r");

    }
  }

  // sum:和值
  // median:判断为大的值
  // he:和值
  // option:传入big,small重命名
  function bigOrSmall(sum, median, he, options) {
    if (!options) {
      options = {};
    }
    if (he === undefined) {
      return sum >= median ? showTag(options.big || "大", "b") : showTag(
        options.small || "小", "r");
    } else {
      return sum === (median - 1) ? showTag(options.he || "和") : (sum >= median
        ? showTag(options.big || "大", "b") : showTag(options.small || "小",
          "r"));
    }
  }

  // 对特码大单（15，17，19，21，23，25，27），小单(1，3，5，7，9，11，13),
  // 大双（14，16，18，20，22，24，26），小双（0，2，4，6，8，10，12）
  // 形态进行投注,所选号码的形态与开奖号码相加之和的形态相同，即为中奖。
  function group(sum) {
    if (sum > 13) {
      return (sum % 2 === 0 ? showTag("大双", "r") : showTag("大单", "r"));
    } else {
      return (sum % 2 === 0 ? showTag("小双", "b") : showTag("小单", "b"));
    }
  }

  // 对特码极大（22，23，24，25，26，27），极小（0，1，2，3，4，5）形态进行投注，
  // 所选号码的形态与开奖号码相加之和的形态相同，即为中奖。
  function extreme(sum) {
    if (sum >= 22) {
      return showTag("极大", "r");
    } else if (sum <= 5) {
      return showTag("极小", "b");
    } else {
      return "";
    }
  }

  Array.prototype.unique = function () {
    var newArr = [];
    for (var i = 0; i < this.length; i++) {
      if (newArr.indexOf(this[i]) == -1) {
        newArr.push(this[i]);
      }
    }
    return newArr;
  }

  // / 筛选 fn:{Function} return:{String}
  Array.prototype.screen = function (fn) {
    if (!fn) {
      return this;
    }
    var a = [];
    for (var i = 0, len = this.length; i < len; i++) {
      fn(this[i]) !== "" && a.push(fn(this[i]));
    }
    return a;
  }

  // ====================================================================
  // ====================================================================
  $(function () {
    initOpenConfig();// 初始thead配置
    var today = $.dateformat(new Date(), 'yyyy-MM-dd');
    $.extend({queryDate: today});
    // $('#datepicker').val(today);

    $.getJSON($.toFullPath('/data/json/games.json'), function (response) {
      var tabPanel;
      $.each(response, function (i, game) {
        if (game.open !== 0 || game.isCredit !== 1) {
          return;
        }
        tabPanel = $(
          '#game-tab-container>.tab-contents>.tab-panel[data-game-cate="-1"], #game-tab-container>.tab-contents>.tab-panel[data-game-cate="'
          + game.cate + '"]');
        tabPanel.append(
          $('<li class="link" data-game-id="' + game.id + '" data-game-code="'
            + game.code + '" data-game-type="' + game.type
            + '" data-game-js="' + (game.jsType === 1) + '">' + game.name
            + '</li>').on('click', function (e) {// game onclick事件
            var $this = $(this),
              gameCode = $this.attr('data-game-code'),
              officialModel = $.getQueryParameter('officialMode'),
              gameId = $this.attr('data-game-id'),
              gameType = $this.attr('data-game-type'),
              isJs = $this.attr('data-game-js') === 'true';

            // 判断officialMode跳转走势
            if (officialModel) {
              if ($.officialMode) {
                if (game.isOffcial && game.type !== 'bjkl8') {
                  $.extend({officialMode: null});
                  return window.location.href = '/page/game-center/open-trend.html?gameCode='
                    + gameCode;
                }
              } else {
                $.extend({officialMode: officialModel});
              }
            }
            if ($this.hasClass('active')) {
              return;
            }
            $this.addClass('active').siblings('.active').removeClass(
              'active');
            $this.parent().siblings().children('.active').removeClass(
              'active');
            $('#gameName').text($this.text());
            $.extend($.curGame, {
              'gameCode': gameCode,
              'gameId': gameId,
              'gameType': gameType,
              'isJs': isJs
            });
            $('#link-tab').show();
            loadOpenInfo($this.attr('data-game-id'), gameType === 'lhc');

            // 判断是否为六合彩,福彩3D,排列3(默认按期数查询)
            if (gameType === 'lhc' || gameType === 'fc3d') {
              $('#queryDate').hide();
              $('#queryRows').show();
              $('#statisDateContainer').hide();

              // 默认最近30期
              $('#queryRows>li:eq(0)').addClass('active').siblings(
                '.active').removeClass('active');
              $.extend({queryDate: 30});
              $('#search-result-date').empty();
            } else {
              $('#queryRows').hide();
              $('#queryDate').show();
              $('#statisDateContainer').show();

              // 默认开奖时间 今天
              $('#queryDate>li:eq(0)').addClass('active').siblings(
                '.active').removeClass('active');
              $.extend({queryDate: today});
              $('#search-result-date').html(today);
            }
            loadData();

          }));
      });
      var gameCode = $.getQueryParameter('gameCode'), activeTabPanel;
      if (!gameCode === false) {
        activeTabPanel = $(
          ' #game-tab-container>.tab-contents>.tab-panel>li[data-game-code="'
          + gameCode + '"]:eq(0)').click().parent();
      }
      if (!gameCode || activeTabPanel.length === 0) {
        activeTabPanel = $(
          ' #game-tab-container>.tab-contents>.tab-panel>li:eq(0)').click().parent();
      }
      $('#game-tab-container>.tabs>li[data-game-cate="' + activeTabPanel.attr(
        'data-game-cate') + '"]').click();
    });

    // 游戏菜单栏 点击事件
    $('#game-tab-container>.tabs>li').on('click', function (e) {
      var $this = $(this);
      if ($this.hasClass('active')) {
        return;
      }
      $this.addClass('active').siblings('.active').removeClass('active');
      $('#game-tab-container>.tab-contents>.tab-panel[data-game-cate="' +
        $this.attr('data-game-cate') +
        '"]').show().siblings(':visible').hide();
    });
    // 最近30，50，100期数据查询
    $('#queryRows>li').on('click', function (e) {
      $(this).addClass('active').siblings('.active').removeClass('active');
      var queryRow = $('#queryRows .active');
      var row = queryRow.attr('data-date');
      $.extend({queryDate: row});
      loadData();
    });

    // 今昨前日期查询
    $('#queryDate>li').on('click', function (e) {
      $(this).addClass('active').siblings('.active').removeClass('active');
      var curQueryDate = getQueryDate();
      $.extend({queryDate: curQueryDate});
      $('#search-result-date').html(curQueryDate);
      loadData();
    });

    // 日期控件查询
    // $('#datepicker').on('click', function () {
    // WdatePicker({
    // el: 'datepicker',
    // onpicked: function () {
    // $.extend({queryDate: $(this).val()});
    // $('#search-result-date').html($(this).val());
    // loadData();
    // }
    // });
    // });
    // 选择开奖日期
    laydate.render({
      elem: '#lotteryDay',
      max:0,
      done: function (value, data) {
        $.extend({queryDate: value});
        $('#search-result-date').html(value);
        loadData();
      }
    });

    // 监听日期元素变化
    $('#search-result-date').bind('DOMNodeInserted', function (e) {
      var targetDate = $(e.target).html(),
        diffNum = DateDiff($.dateformat(new Date(), 'yyyy-MM-dd'),
          targetDate);// 相差天数;
      $('#datepicker').val(targetDate);

      switch (diffNum) {
        case 0:
          $('#queryDate>li:eq(0)').addClass('active').siblings(
            '.active').removeClass('active');
          break;
        case 1:
          $('#queryDate>li:eq(1)').addClass('active').siblings(
            '.active').removeClass('active');
          break;
        case 2:
          $('#queryDate>li:eq(2)').addClass('active').siblings(
            '.active').removeClass('active');
          break;
        default:
          $('#queryDate>li').siblings('.active').removeClass('active');
          break;
      }
    });
  });
})(jQuery);